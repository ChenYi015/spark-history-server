#
# Copyright 2025 Yi Chen.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

suite: Test Deployment

templates:
  - deployment.yaml

release:
  name: spark-history-server
  namespace: spark

tests:
  - it: Should create Deployment by default
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
          name: spark-history-server
          namespace: spark

  - it: Should add replicas if `replicas` is set
    set:
      replicas: 0
    asserts:
      - equal:
          path: spec.replicas
          value: 0

  - it: Should add replicas if `replicas` is set
    set:
      replicas: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3

  - it: Should use the specified image
    set:
      image:
        registry: test-registry
        repository: test-repository
        tag: test-tag
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].image
          value: test-registry/test-repository:test-tag

  - it: Should use the specified image pull policy if `image.pullPolicy` is set
    set:
      image:
        pullPolicy: Always
    asserts:
      - equal:
          path: spec.template.spec.containers[*].imagePullPolicy
          value: Always

  - it: Should add env if `env` is set
    set:
      env:
        - name: KEY1
          value: VALUE1
        - name: KEY2
          valueFrom:
            configMapKeyRef:
              name: test-configmap
              key: test-key
        - name: KEY3
          valueFrom:
            secretKeyRef:
              name: test-secret
              key: test-key

    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].env
          content:
            name: KEY1
            value: VALUE1
      - contains:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].env
          content:
            name: KEY2
            valueFrom:
              configMapKeyRef:
                name: test-configmap
                key: test-key
      - contains:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].env
          content:
            name: KEY3
            valueFrom:
              secretKeyRef:
                name: test-secret
                key: test-key

  - it: Should add envFrom if `envFrom` is set
    set:
      envFrom:
        - configMapRef:
            name: test-configmap
            optional: false
        - secretRef:
            name: test-secret
            optional: false
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].envFrom
          content:
            configMapRef:
              name: test-configmap
              optional: false
      - contains:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].envFrom
          content:
            secretRef:
              name: test-secret
              optional: false

  - it: Should add volume mounts if `volumeMounts` is set
    set:
      volumeMounts:
        - name: volume1
          mountPath: /volume1
        - name: volume2
          mountPath: /volume2
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].volumeMounts
          content:
            name: volume1
            mountPath: /volume1
      - contains:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].volumeMounts
          content:
            name: volume2
            mountPath: /volume2

  - it: Should add resources if `resources` is set
    set:
      resources:
        requests:
          memory: 64Mi
          cpu: 250m
        limits:
          memory: 128Mi
          cpu: 500m
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].resources
          value:
            requests:
              memory: 64Mi
              cpu: 250m
            limits:
              memory: 128Mi
              cpu: 500m

  - it: Should add container securityContext if `securityContext` is set
    set:
      securityContext:
        readOnlyRootFilesystem: true
        runAsUser: 1000
        runAsGroup: 2000
        fsGroup: 3000
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
        runAsNonRoot: true
        privileged: false
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].securityContext.readOnlyRootFilesystem
          value: true
      - equal:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].securityContext.runAsGroup
          value: 2000
      - equal:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].securityContext.fsGroup
          value: 3000
      - equal:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].securityContext.allowPrivilegeEscalation
          value: false
      - equal:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].securityContext.capabilities
          value:
            drop:
              - ALL
      - equal:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.containers[?(@.name=="spark-history-server")].securityContext.privileged
          value: false

  - it: Should add secrets if `image.pullSecrets` is set
    set:
      image:
        pullSecrets:
          - name: test-secret1
          - name: test-secret2
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: test-secret1
      - equal:
          path: spec.template.spec.imagePullSecrets[1].name
          value: test-secret2

  - it: Should add volumes if `volumes` is set
    set:
      volumes:
        - name: volume1
          emptyDir: {}
        - name: volume2
          emptyDir: {}
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: volume1
            emptyDir: {}
          count: 1
      - contains:
          path: spec.template.spec.volumes
          content:
            name: volume2
            emptyDir: {}
          count: 1

  - it: Should add nodeSelector if `nodeSelector` is set
    set:
      nodeSelector:
        key1: value1
        key2: value2
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector.key1
          value: value1
      - equal:
          path: spec.template.spec.nodeSelector.key2
          value: value2

  - it: Should add affinity if `affinity` is set
    set:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: topology.kubernetes.io/zone
                    operator: In
                    values:
                      - antarctica-east1
                      - antarctica-west1
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: another-node-label-key
                    operator: In
                    values:
                      - another-node-label-value
    asserts:
      - equal:
          path: spec.template.spec.affinity
          value:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: topology.kubernetes.io/zone
                        operator: In
                        values:
                          - antarctica-east1
                          - antarctica-west1
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 1
                  preference:
                    matchExpressions:
                      - key: another-node-label-key
                        operator: In
                        values:
                          - another-node-label-value

  - it: Should add tolerations if `tolerations` is set
    set:
      tolerations:
        - key: key1
          operator: Equal
          value: value1
          effect: NoSchedule
        - key: key2
          operator: Exists
          effect: NoSchedule
    asserts:
      - equal:
          path: spec.template.spec.tolerations
          value:
            - key: key1
              operator: Equal
              value: value1
              effect: NoSchedule
            - key: key2
              operator: Exists
              effect: NoSchedule

  - it: Should add pod securityContext if `podSecurityContext` is set
    set:
      podSecurityContext:
        runAsUser: 1000
        runAsGroup: 2000
        fsGroup: 3000
    asserts:
      - equal:
          path: spec.template.spec.securityContext
          value:
            runAsUser: 1000
            runAsGroup: 2000
            fsGroup: 3000
